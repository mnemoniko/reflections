When would you want to use a remote repository rather than keeping all your work local?
- To share with other collaborators
- To publish code or code snapshots/versions
- To backup changes you made locally

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
- Collaborators might push code to the repository that is incompatible with yours
- If you are making local changes, a remote pull would overwrite them

Describe the differences between forks, clones, and branches. When would you use one instead of another
- Fork is to get a copy of someone else's code that you want to change, but don't necessarily want to collaborate on
- Fork leaves the original code intact
- Clone gets a copy of a repository
- Clone works for initializing repositories, and for pushing/pulling changes later
- Branch creates a new branch of a code you have already forked or clone
- Branches are used to add new features, or fix bugs, and are considered part of the original clone or fork.

What is the benefit of having a copy of the last known state of the remote stored locally?
- You can see how much the remote changed since you last cloned or pulled it
- Gives info on how much needs to be merged

How would you collaborate without using Git or GitHub? What would be easier and what would be harder?
- Email file changes back and forth
- Or all have access to the same server/local files
- Harder to see who changes what and when
- Edits at the same time might be overwritten
- Would require more advanced planning
- Nothing would be easier really

when would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
- Only change master when you are starting a new project, or merging a branch
- Creating a new branch allows you to test changes without affecting working code
- You would almost always want to make changes in a separate branch, then submit a pull request or merge with master.

